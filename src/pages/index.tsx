import { useEffect, useState } from "react";
import { useUser } from "@clerk/nextjs";
import Head from "next/head";
import { type NextPage } from "next";

import { api } from "~/utils/api";
import UserInfo from "~/components/UserInfo";
import NavBar from "~/layouts/NavBar";
import Logo from "~/components/Logo";
import Container from "~/layouts/Container";
import SignControl from "~/components/SignControl";
import PostList from "~/components/PostList";
import AddPost from "~/components/AddPost";

const Home: NextPage = () => {
  const [post, setPost] = useState("");
  const { isSignedIn } = useUser();
  const {
    data,
    isLoading: isLoadingPosts,
    isFetching,
  } = api.posts.getAll.useQuery();

  const ctx = api.useContext();

  useEffect(() => {
    void ctx.posts.getAll.invalidate();
  }, [isSignedIn]);

  const { mutate, isLoading: isLoadingOnePost } = api.posts.addPost.useMutation(
    {
      onSuccess: () => {
        setPost("");
        void ctx.posts.getAll.invalidate();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to post! Please try again later.");
        }
      },
    }
  );

  const { mutate: update, isLoading: isUpdatingOnePost } =
    api.posts.updatePost.useMutation({
      onSuccess: () => {
        void ctx.posts.getAll.invalidate();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to update! Please try again later.");
        }
      },
    });

  const { mutate: deletePost, isLoading: isDeletingPost } =
    api.posts.deletePost.useMutation({
      onSuccess: () => {
        void ctx.posts.getAll.invalidate();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to delete post! Please try again later.");
        }
      },
    });

  const removePost = (id: string) => deletePost({ id });

  const onAddPost = (post: string) => mutate({ content: post });

  const updatePost = (id: string, post: string) =>
    update({ id, content: post });

  const isInProgress =
    isLoadingPosts ||
    isFetching ||
    isLoadingOnePost ||
    isDeletingPost ||
    isUpdatingOnePost;

  return (
    <>
      <Head>
        <title>T3-Chirp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar>
        <div className="flex w-full items-center justify-between">
          <Logo />
          <div className="flex items-center justify-between">
            <UserInfo />
            <SignControl isSignedIn={isSignedIn} />
          </div>
        </div>
      </NavBar>
      <main className="flex flex-col items-center justify-start py-24 ">
        <Container>
          {isSignedIn && (
            <AddPost
              isInProgress={isInProgress}
              onAddPost={onAddPost}
              post={post}
              setPost={setPost}
            />
          )}

          <PostList
            data={data}
            deletePost={removePost}
            updatePost={updatePost}
            isInProgress={isInProgress}
          />
        </Container>
      </main>
    </>
  );
};

export default Home;
