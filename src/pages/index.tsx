import { SignOutButton } from "@clerk/clerk-react";
import { SignInButton, useUser } from "@clerk/nextjs";
import { type NextPage } from "next";
import Head from "next/head";

import { api } from "~/utils/api";
import UserInfo from "~/components/UserInfo";
import { useState } from "react";
import SignOutIcon from "~/components/icons/SignOutIcon";
import SignInIcon from "~/components/icons/SignInIcon";
import NavBar from "~/layouts/NavBar";
import Logo from "~/components/Logo";
import Container from "~/layouts/Container";
import PostCard from "~/components/PostCard";
import SignControl from "~/components/SignControl";
import PostList from "~/components/PostList";

const Home: NextPage = () => {
  const [post, setPost] = useState("");
  const { user, isSignedIn } = useUser();
  const {
    data,
    isLoading: isLoadingPosts,
    isFetching,
  } = api.posts.getAll.useQuery();

  const ctx = api.useContext();

  const { mutate, isLoading: isLoadingOnePost } = api.posts.addPost.useMutation(
    {
      onSuccess: () => {
        setPost("");
        void ctx.posts.getAll.invalidate();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to post! Please try again later.");
        }
      },
    }
  );

  const { mutate: deletePost, isLoading: isDeletingPost } =
    api.posts.deletePost.useMutation({
      onSuccess: () => {
        void ctx.posts.getAll.invalidate();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to delete post! Please try again later.");
        }
      },
    });

  const removePost = (id: string) => {
    deletePost({ id });
  };

  const isProcess =
    isLoadingPosts || isFetching || isLoadingOnePost || isDeletingPost;

  return (
    <>
      <Head>
        <title>T3-Chirp</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar>
        <div className="flex w-full items-center justify-between">
          <Logo />
          <div className="flex items-center justify-between">
            <UserInfo />
            <SignControl isSignedIn={isSignedIn} />
          </div>
        </div>
      </NavBar>
      <main className="flex h-[2000px] flex-col items-center justify-start pt-24">
        <Container>
          {isSignedIn && (
            <div className="mb-5 flex w-full flex-col items-center gap-3 sm:flex-row sm:items-stretch">
              <input
                type="text"
                value={post}
                onChange={(e) => setPost(e.target.value)}
                placeholder="Please, add your post..."
                className="h-[40px] w-full rounded p-1 text-neutral-800"
              />
              <button
                className="min-w-[120px] max-w-[140px] rounded bg-violet-600 px-3 py-2 text-center text-white transition-all duration-300 hover:bg-violet-800"
                onClick={() => mutate({ content: post })}
                disabled={isProcess}
              >
                Add Post
              </button>
            </div>
          )}

          <PostList data={data} deletePost={removePost} isProcess={isProcess} />
        </Container>
      </main>
    </>
  );
};

export default Home;
